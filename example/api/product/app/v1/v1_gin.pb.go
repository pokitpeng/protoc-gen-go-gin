// Code generated by github.com/mohuishou/protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the mohuishou/protoc-gen-go-gin package it is being compiled against.
// context.metadata.
//gin.errors.

type BlogServiceHTTPServer interface {
	CreateArticle(context.Context, *Article) (*Article, error)

	GetArticles(context.Context, *GetArticlesReq) (*GetArticlesResp, error)
}

type BlogService struct {
	Server BlogServiceHTTPServer
	Router gin.IRouter
	Resp   interface {
		Error(ctx *gin.Context, err error)
		ParamsError(ctx *gin.Context, err error)
		Success(ctx *gin.Context, data interface{})
	}
}

// Resp 返回值
type DefaultBlogServiceResp struct{}

// Error 返回错误信息
func (resp DefaultBlogServiceResp) Error(ctx *gin.Context, err error) {
	code := -1
	status := 500
	msg := "未知错误"

	if err == nil {
		msg += ", err is nil"
		ctx.JSON(status, map[string]interface{}{
			"code": code,
			"msg":  msg,
		})
		return
	}

	type iCode interface {
		HTTPCode() int
		Message() string
		Code() int
	}

	var c iCode
	if errors.As(err, &c) {
		status = c.HTTPCode()
		code = c.Code()
		msg = c.Message()
	}

	_ = ctx.Error(err)

	ctx.JSON(status, map[string]interface{}{
		"code": code,
		"msg":  msg,
	})
}

// ParamsError 参数错误
func (resp DefaultBlogServiceResp) ParamsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	ctx.JSON(400, map[string]interface{}{
		"code": 400,
		"msg":  "参数错误",
	})
}

// Success 返回成功信息
func (resp DefaultBlogServiceResp) Success(ctx *gin.Context, data interface{}) {
	// resp需要定义code，为了让code和数据平级
	ctx.JSON(200, data)
}

func (s *BlogService) GetArticles(ctx *gin.Context) {
	var in GetArticlesReq

	if err := ctx.ShouldBindUri(&in); err != nil {
		s.Resp.ParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		s.Resp.ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.Server.(BlogServiceHTTPServer).GetArticles(newCtx, &in)
	if err != nil {
		s.Resp.Error(ctx, err)
		return
	}

	s.Resp.Success(ctx, out)
}

func (s *BlogService) CreateArticle(ctx *gin.Context) {
	var in Article

	if err := ctx.ShouldBindUri(&in); err != nil {
		s.Resp.ParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindJSON(&in); err != nil {
		s.Resp.ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.Server.(BlogServiceHTTPServer).CreateArticle(newCtx, &in)
	if err != nil {
		s.Resp.Error(ctx, err)
		return
	}

	s.Resp.Success(ctx, out)
}
